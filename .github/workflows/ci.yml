name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write
  checks: write
  pull-requests: write
  id-token: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      ########################################
      # 🧱 Project setup & build
      ########################################

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Run tests and generate coverage reports
        run: ./gradlew clean build test jacocoTestReport jacocoRootReport --no-daemon

      ########################################
      # 📦 Test and coverage reports
      ########################################

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test/

      - name: Upload Jacoco coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/

      ########################################
      # 📊 SonarCloud static code analysis
      ########################################

      - name: SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=marcoslozina_template-service
            -Dsonar.organization=marcoslozina
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml

      ########################################
      # 📥 Submit dependency graph to GitHub
      ########################################

      - name: Submit dependency graph
        uses: gradle/actions/dependency-submission@v4

      ########################################
      # 📌 Check outdated dependencies
      ########################################

      - name: Run Gradle dependency updates
        run: ./gradlew dependencyUpdates > deps.txt

      - name: Upload dependency status to Gist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Updating Gist with dependency report..."
          content=$(cat deps.txt | jq -Rs .)
          curl -X PATCH https://api.github.com/gists/c8f7b18150bc5ff47041cafca28dabc3             -H "Authorization: token $GITHUB_TOKEN"             -H "Content-Type: application/json"             -d "{"files": {"dependencies.json": {"content": $content}}}"

      ########################################
      # 🔐 Update security badge (Dependabot alerts)
      ########################################

      - name: Update vulnerabilities badge (Gist)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          echo "Counting open Dependabot alerts..."
          count=$(gh api /repos/${{ github.repository }}/dependabot/alerts --paginate | jq length)
          echo "{"vulnerabilities": $count}" > security.json
          content=$(cat security.json | jq -Rs .)

          echo "Updating Gist file..."
          curl -X PATCH https://api.github.com/gists/a593e52d50f687d909316b2e77e7370a             -H "Authorization: Bearer $GIST_TOKEN"             -H "Content-Type: application/json"             -d "{"files": {"security.json": {"content": $content}}}"

      ########################################
      # 📈 Update coverage badge (Gist)
      ########################################

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Update coverage badge (Gist)
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          echo "Reading coverage from Jacoco XML..."
          coverage=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@covered)" build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml)
          missed=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@missed)" build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml)
          total=$(echo "$coverage + $missed" | bc)
          percent=$(echo "scale=1; 100 * $coverage / $total" | bc)

          echo "Detected coverage: $percent%"

          if (( $(echo "$percent >= 80" | bc -l) )); then
            color="brightgreen"
          else
            color="red"
          fi

          jq -n \
            --arg percent "${percent}%" \
            --arg color "$color" \
            '{
              schemaVersion: 1,
              label: "coverage",
              message: $percent,
              color: $color
            }' > coverage.json

          echo "Uploading coverage badge to Gist..."
          content=$(cat coverage.json | jq -Rs .)

          curl -X PATCH https://api.github.com/gists/012a070225e33492e22097a93349fc61 \
            -H "Authorization: Bearer $GIST_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"files\": {\"coverage.json\": {\"content\": $content}}}"
