plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
    id 'com.diffplug.spotless' version "${spotlessVersion}"
    id 'info.solidsoft.pitest' version "${pitestVersion}"
    id 'jacoco'
    id 'com.github.ben-manes.versions' version "${benManesVersion}"
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '5.0.13'
    id 'org.sonarqube' version "${sonarQubeVersion}"
}

group = 'com.company.templateservice'
version = '1.0.0-RELEASE'

def javaVersion = file('java.version').text.trim()
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(javaVersion.toInteger()))
    }
}

spotless {
    java {
        googleJavaFormat("1.25.2")
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

pmd {
    toolVersion = "${pmdVersion}"
    ruleSets = []
    ruleSetFiles = files("${rootProject.projectDir}/config/pmd/pmd-rules.xml")
}

sonarqube {
    properties {
        property "sonar.projectKey", "template-service"
        property "sonar.projectName", "Template Service"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.jacoco.reportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

sourceSets {
    test {
        java.srcDirs = ['src/test/java']
    }
    integrationTest {
        java.srcDirs = ['src/test/java/com/company/templateservice/integration']
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
    performanceTest {
        java.srcDirs = ['src/test/java/com/company/templateservice/performance']
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
    mutationTest {
        java.srcDirs = ['src/test/java/com/company/templateservice/mutation']
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
    architectureTest {
        java.srcDirs = ['src/test/java/com/company/templateservice/architecture']
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
    shouldRunAfter test
}

tasks.register('performanceTest', Test) {
    description = 'Runs performance tests'
    group = 'verification'
    testClassesDirs = sourceSets.performanceTest.output.classesDirs
    classpath = sourceSets.performanceTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.register('mutationTest', Test) {
    description = 'Runs mutation tests'
    group = 'verification'
    testClassesDirs = sourceSets.mutationTest.output.classesDirs
    classpath = sourceSets.mutationTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.register('archTest', Test) {
    description = 'Runs architecture tests'
    group = 'verification'
    testClassesDirs = sourceSets.architectureTest.output.classesDirs
    classpath = sourceSets.architectureTest.runtimeClasspath
    useJUnitPlatform()
}

check.dependsOn integrationTest, performanceTest, mutationTest, archTest

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Spring Boot WebFlux (reactivo)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Spring Boot Data con soporte para bases de datos reactivas (R2DBC)
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'

    // JPA con Hibernate Reactive (para bases de datos reactivas)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate.reactive:hibernate-reactive-core:2.0.6.Final'

    // Lombok (para reducir código boilerplate)
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Validaciones con Jakarta Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Monitoreo con Prometheus
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // Drivers de base de datos (elige uno según tu necesidad)
    runtimeOnly 'io.r2dbc:r2dbc-h2'           // H2 en memoria (para desarrollo)
    runtimeOnly 'com.h2database:h2'           // H2 tradicional
    runtimeOnly 'org.postgresql:r2dbc-postgresql' // PostgreSQL
    runtimeOnly 'io.asyncer:r2dbc-mysql'      // MySQL

    // Dependencias de testing
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "com.tngtech.archunit:archunit-junit5:${archunitVersion}"
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "org.jacoco:org.jacoco.core:${jacocoVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.pitest:pitest-junit5-plugin:${pitestJunitPluginVersion}"

    // Análisis estático de código
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
    pmd "net.sourceforge.pmd:pmd-java:${pmdVersion}"
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
    dependsOn test, integrationTest, performanceTest, mutationTest, archTest
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'
            includes = ['com.company.templateservice.*']
            excludes = ['**/config/**', '**/dto/**', '**/entity/**', '**/*Application*', '**/*Generated*', '**/*Exception*']
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

tasks.named('bootJar') {
    mainClass = 'com.company.templateservice.TemplateServiceApplication'
}

tasks.named('bootRun') {
    mainClass = 'com.company.templateservice.TemplateServiceApplication'
}
