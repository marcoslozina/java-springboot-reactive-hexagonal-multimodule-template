plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
    id 'com.diffplug.spotless' version "${spotlessVersion}"
    id 'info.solidsoft.pitest' version "${pitestVersion}"
    id 'jacoco'
    id 'com.github.ben-manes.versions' version "${benManesVersion}"
    id 'pmd'
    id 'org.sonarqube' version "${sonarQubeVersion}"
    id 'org.owasp.dependencycheck' version '8.4.1'
}

group = 'com.company.templateservice'
version = '1.0.0-RELEASE'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(javaVersion.toInteger()))
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "io.opentelemetry:opentelemetry-bom:${otelVersion}"
        mavenBom "com.fasterxml.jackson:jackson-bom:${jacksonBomVersion}"
    }
}

springBoot {
    mainClass.set("com.company.templateservice.Application")
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(javaVersion.toInteger()))
        }
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "com.tngtech.archunit:archunit-junit5:${archunitVersion}"
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    plugins.withId('org.springframework.boot') {
        bootJar.enabled = false
    }
    jar {
        enabled = true
    }
}

dependencies {
    // Core Webflux + Reactive Stack
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation "io.r2dbc:r2dbc-h2:${r2dbcH2Version}"
    implementation "org.hibernate.reactive:hibernate-reactive-core:${hibernateReactiveVersion}"

    // AWS SDK
    implementation "software.amazon.awssdk:s3:${awsSdkVersion}"
    implementation "software.amazon.awssdk:dynamodb:${awsSdkVersion}"
    implementation "software.amazon.awssdk:sqs:${awsSdkVersion}"
    implementation "software.amazon.awssdk:sns:${awsSdkVersion}"

    // Messaging (Kafka)
    implementation "io.projectreactor.kafka:reactor-kafka:${reactorKafkaVersion}"

    // JSON Serialization
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // Observabilidad (Micrometer Tracing con OpenTelemetry)
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation "io.opentelemetry:opentelemetry-exporter-otlp"

    // Calidad de CÃ³digo y Seguridad
    implementation "net.sourceforge.pmd:pmd-java:${pmdVersion}"
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

tasks.withType(Test).configureEach {
    finalizedBy 'jacocoTestReport'
}

tasks.named('jacocoTestReport') {
    dependsOn 'test'
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
}

dependencyUpdates {
    revision = 'release'
    outputFormatter = 'json'
    outputDir = 'build/dependencyUpdates'
    reportfileName = 'report'
}

// Chequeo combinado: test + coverage + update + vulnerabilidades
tasks.register('checkAll') {
    dependsOn 'clean', 'test', 'jacocoTestReport', 'dependencyUpdates', 'dependencyCheckAnalyze'
}

// Config OWASP Dependency Check
dependencyCheck {
    failBuildOnCVSS = 7  // Falla si hay vulnerabilidades graves
    suppressionFile = file("${project.rootDir}/dependency-check-suppressions.xml")
    analyzers {
        assemblyEnabled = false
    }
}
