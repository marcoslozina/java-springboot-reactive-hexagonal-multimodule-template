name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write
  checks: write
  pull-requests: write
  id-token: write
  security-events: read  # Necesario para leer vulnerabilidades

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      ##############################################################
      # 🧱 Project setup & build
      ##############################################################

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Run tests and generate coverage reports
        run: ./gradlew clean build test jacocoTestReport jacocoRootReport --no-daemon

      ##############################################################
      # 📦 Upload test and coverage reports as artifacts
      ##############################################################

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test/

      - name: Upload Jacoco coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/

      ##############################################################
      # 📊 SonarCloud static code analysis
      ##############################################################

      - name: SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=marcoslozina_template-service
            -Dsonar.organization=marcoslozina
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml

      ##############################################################
      # 📥 Submit dependency graph to GitHub
      ##############################################################

      - name: Submit dependency graph
        uses: gradle/actions/dependency-submission@v4

      ##############################################################
      # 📌 Check outdated dependencies and upload to Gist
      ##############################################################

      - name: Run Gradle dependency updates
        run: ./gradlew dependencyUpdates > deps.txt

      - name: Upload dependency status to Gist
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          echo "Updating Gist with dependency report..."
          content=$(cat deps.txt | jq -Rs .)
          data=$(jq -n --arg content "$content" '{files: {"dependencies.json": {content: $content}}}' | jq -c)
          curl -X PATCH https://api.github.com/gists/c8f7b18150bc5ff47041cafca28dabc3 \
            -H "Authorization: token $GIST_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$data"

      ##############################################################
      # 🔐 Update vulnerabilities badge (GitHub Security)
      ##############################################################

      - name: Update vulnerabilities badge (Gist)
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          echo "Counting open GitHub Security alerts..."
          count=$(curl -s -H "Authorization: Bearer ${{ github.token }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/dependabot/alerts?state=open" | jq '. | length')

          echo "Vulnerabilities count: $count"

          # Crear JSON válido con formato exacto
          jq -n --argjson count "$count" '{vulnerabilities: $count}' | jq -c > security.json

          echo "Contenido de security.json:"
          cat security.json

          echo "Uploading to Gist..."
          curl -X PATCH \
            "https://api.github.com/gists/a593e52d50f687d909316b2e77e7370a" \
            -H "Authorization: token $GIST_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$(cat security.json)"

      ##############################################################
      # 📈 Update coverage badge from Jacoco report
      ##############################################################

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Update coverage badge (Gist)
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          echo "Reading coverage from Jacoco XML..."
          coverage=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@covered)" build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml || echo "0")
          missed=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@missed)" build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml || echo "0")

          # Asegurar valores numéricos
          coverage=${coverage:-0}
          missed=${missed:-0}

          total=$((coverage + missed))
          percent=$(awk "BEGIN {printf \"%.1f\", ($coverage/$total)*100}")

          echo "✔️ covered=$coverage"
          echo "❌ missed=$missed"
          echo "📊 total=$total"
          echo "✅ percent=$percent%"

          if (( $(echo "$percent >= 80" | bc -l) )); then
            color="brightgreen"
          elif (( $(echo "$percent >= 50" | bc -l) )); then
            color="yellow"
          else
            color="red"
          fi

          # Crear JSON con formato exacto para shields.io
          jq -n \
            --arg percent "$percent%" \
            --arg color "$color" \
            '{schemaVersion: 1, label: "coverage", message: $percent, color: $color}' | jq -c > coverage.json

          echo "Contenido de coverage.json:"
          cat coverage.json

          echo "Uploading to Gist..."
          curl -X PATCH \
            "https://api.github.com/gists/012a070225e33492e22097a93349fc61" \
            -H "Authorization: token $GIST_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$(cat coverage.json)"
