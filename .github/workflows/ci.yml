name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write
  checks: write
  pull-requests: write
  id-token: write
  security-events: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      ##############################################################
      # ðŸ§± Project setup & build
      ##############################################################

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Run tests and generate coverage reports
        run: ./gradlew clean build test jacocoTestReport jacocoRootReport --no-daemon

      ##############################################################
      # ðŸ“¦ Upload test and coverage reports as artifacts
      ##############################################################

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test/

      - name: Upload Jacoco coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/

      ##############################################################
      # ðŸ“Š SonarCloud static code analysis
      ##############################################################

      - name: SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=marcoslozina_template-service
            -Dsonar.organization=marcoslozina
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml

      ##############################################################
      # ðŸ“¥ Submit dependency graph to GitHub
      ##############################################################

      - name: Submit dependency graph
        uses: gradle/actions/dependency-submission@v4

      ##############################################################
      # ðŸ“Š Generate coverage and vulnerability JSONs
      ##############################################################

      - name: Install required tools
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils jq

      - name: Generate coverage.json
        run: |
          mkdir -p .badge-data
          coverage=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@covered)" build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml || echo "0")
          missed=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@missed)" build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml || echo "0")
          total=$((coverage + missed))

          if [ "$total" -eq 0 ]; then
            percent="0.0"
          else
            percent=$(awk "BEGIN {printf \"%.1f\", ($coverage/$total)*100}")
          fi

          if (( $(echo "$percent >= 80" | bc -l) )); then
            color="brightgreen"
          elif (( $(echo "$percent >= 50" | bc -l) )); then
            color="yellow"
          else
            color="red"
          fi

          jq -n \
            --arg percent "$percent%" \
            --arg color "$color" \
            '{schemaVersion:1,label:"coverage",message:$percent,color:$color}' \
            > .badge-data/coverage.json

      - name: Generate security.json
        run: |
          mkdir -p .badge-data
          count=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/dependabot/alerts?state=open" | jq length)

          if (( count == 0 )); then
            color="brightgreen"
          elif (( count < 10 )); then
            color="yellow"
          else
            color="red"
          fi

          jq -n \
            --arg count "$count" \
            --arg color "$color" \
            '{schemaVersion:1,label:"Vulnerabilities",message:$count,color:$color}' \
            > .badge-data/security.json

      - name: Show updated security badge
        run: |
          echo "ðŸ“‹ Contents of security.json:"
          cat .badge-data/security.json
          echo "--- Git status ---"
          git status

      ##############################################################
      # ðŸš€ Deploy badge data to GitHub Pages (gh-pages branch)
      ##############################################################

      - name: Commit and push badge files to gh-pages
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          git fetch origin gh-pages || true
          git worktree add gh-pages gh-pages || git checkout --orphan gh-pages

          cp .badge-data/*.json gh-pages/
          cd gh-pages
          git add *.json
          git commit -m "ðŸ“Š Update badges" || echo "No changes to commit"
          git push origin HEAD:gh-pages
